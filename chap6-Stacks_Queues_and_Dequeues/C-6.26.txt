Describe how  to implement the double-ended queue ADT using two stacks as 
instance variables, What are the running time of the methods?


Worst case is O(n) when transfering data between stacks
Amoritized is O(1)

init()
    self.incoming = Stack()
    self.outgoing = Stack()

moveBetweenStacks()
    while not incoming.isEmpty()
        outgoing.push(incoming.pop())

len __()__
    return len(self.incoming) + len(self.outgoing)

isEmpty()
    return self.incoming.isEmpty and self.outgoing.isEmpty()
    
front()
    if self.isEmpty()
        raise Empty("The queue is empty")

    if self.outgoing.isEmpty()
        moveBetweenStacks()

    return self.outgoing.top()

delete_first(()
    if self.isEmpty()
        raise Empty("The queue is empty")

    if self.outgoing.isEmpty()
        moveBetweenStacks()

    return self.outgoing.pop()

delete_last()
    if self.outgoing.isEmpty()
        raise Empty("The queue is empty")

    return self.incoming.pop()

add_first(val)
    self.outgoing.push(val)

add_last(val)
    self.incoming.push(val)





